import gui.MusicStoreGUI;

public class MusicStoreSystem {
    public static void main(String[] args) {
        MusicStoreGUI.main(args);
    }
}
package utils;

import java.util.Random;

public class InputDevice {
    private Random random;

    public InputDevice() {
        this.random = new Random();
    }

    public String getType() {
        return "random";
    }

    public Integer nextInt() {
        return random.nextInt(100) + 1;
    }

    public String getLine() {
        return "The quick brown fox jumps over the lazy dog.";
    }

    public Integer[] getNumbers(int N) {
        Integer[] numArray = new Integer[N];
        for (int i = 0; i < N; i++) {
            numArray[i] = nextInt();
        }
        return numArray;
    }
}
package utils;

public class OutputDevice {
    public void writeMessage(String message) {
        System.out.println(message);
    }
}
package utils;

public interface Discountable {
    double applyDiscount();
}
package utils;

public interface Sellable {
    void sell();
}
package models;

import utils.Discountable;

import java.util.List;

public class Order implements Discountable {
    private Item item;
    private List<Discount> discounts;

    public Order(Item item, List<Discount> discounts) {
        this.item = item;
        this.discounts = discounts;
    }

    @Override
    public double applyDiscount() {
        double totalDiscount = 0;
        for (Discount discount : discounts) {
            totalDiscount += discount.calculateDiscount(item.getPrice());
        }
        return item.getPrice() - totalDiscount;
    }

    public Item getItem() {
        return item;
    }
}
package models;

import utils.Sellable;

public class Poster extends Item implements Sellable {
    public Poster(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling poster: " + getName() + " for $" + getPrice());
    }
}
package models;

import utils.Sellable;

public class Disk extends Item implements Sellable {
    public Disk(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling disk: " + getName() + " for $" + getPrice());
    }
}
package models;

public class Customer {
    private String name;
    private String email;

    public Customer(String name, String email) {
        this.name = name;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }
}
package models;

public class Payment {
    private String method;
    private double amountPaid;

    public Payment(String method, double amountPaid) {
        this.method = method;
        this.amountPaid = amountPaid;
    }

    public void processPayment() {
        System.out.println("Processing payment with " + method + " for $" + amountPaid);
    }
}
package models;

public class Discount {
    private double amount;
    private String type;

    public Discount(double amount, String type) {
        this.amount = amount;
        this.type = type;
    }

    public double calculateDiscount(double price) {
        if (type.equalsIgnoreCase("percentage")) {
            return price * (amount / 100);
        } else if (type.equalsIgnoreCase("flat")) {
            return amount;
        }
        return 0;
    }

    public String getType() {
        return type;
    }
}
package models;

import utils.Sellable;

public class CD extends Item implements Sellable {
    public CD(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling CD: " + getName() + " for $" + getPrice());
    }
}
package models;

import utils.Sellable;

public class Instrument extends Item implements Sellable {
    public Instrument(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling instrument: " + getName() + " for $" + getPrice());
    }
}
package models;

public abstract class Item {
    private String name;
    private double price;

    public Item(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}
package gui;

import models.*;
import services.InventoryService;
import utils.OutputDevice;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class MusicStoreGUI extends JFrame {
    private JTextField itemNameField;
    private JTextField itemPriceField;
    private JComboBox<String> itemTypeCombo;
    private DefaultListModel<String> inventoryListModel;
    private InventoryService inventoryService;

    public MusicStoreGUI() {
        inventoryService = new InventoryService();
        setTitle("Music Store Inventory Management");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        inputPanel.add(new JLabel("Item Name:"));
        itemNameField = new JTextField();
        inputPanel.add(itemNameField);

        inputPanel.add(new JLabel("Item Price:"));
        itemPriceField = new JTextField();
        inputPanel.add(itemPriceField);

        inputPanel.add(new JLabel("Item Type:"));
        itemTypeCombo = new JComboBox<>(new String[]{"CD", "Disk", "Instrument", "Poster"});
        inputPanel.add(itemTypeCombo);

        JButton addButton = new JButton("Add Item");
        inputPanel.add(addButton);

        add(inputPanel, BorderLayout.NORTH);
        inventoryListModel = new DefaultListModel<>();
        JList<String> inventoryList = new JList<>(inventoryListModel);
        JScrollPane listScrollPane = new JScrollPane(inventoryList);
        add(listScrollPane, BorderLayout.CENTER);

        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addItemToInventory();
            }
        });
    }

    private void addItemToInventory() {
        String name = itemNameField.getText();
        String priceText = itemPriceField.getText();
        String type = (String) itemTypeCombo.getSelectedItem();

        try {
            double price = Double.parseDouble(priceText);
            Item item;

            switch (type) {
                case "CD":
                    item = new CD(name, price);
                    break;
                case "Disk":
                    item = new Disk(name, price);
                    break;
                case "Instrument":
                    item = new Instrument(name, price);
                    break;
                case "Poster":
                    item = new Poster(name, price);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid item type");
            }

            inventoryService.addItem(item);
            inventoryListModel.addElement(item.getName() + " - $" + item.getPrice() + " (" + type + ")");
            itemNameField.setText("");
            itemPriceField.setText("");

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid price. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            MusicStoreGUI gui = new MusicStoreGUI();
            gui.setVisible(true);
        });
    }
}
package services;

import models.Customer;
import models.Order;
import models.Payment;

import java.util.ArrayList;
import java.util.List;

public class OrderService {
    private List<Order> orders;
    private List<Customer> customers;

    public OrderService() {
        orders = new ArrayList<>();
        customers = new ArrayList<>();
    }

    public void placeOrder(Order order, Customer customer) {
        orders.add(order);
        customers.add(customer);
        System.out.println("Order placed for customer: " + customer.getName());
    }

    public void listOrders() {
        System.out.println("Orders:");
        for (Order order : orders) {
            System.out.println(" - " + order.getItem().getName() + " after discount: $" + order.applyDiscount());
        }
    }
}
package services;

import models.Item;

import java.util.ArrayList;
import java.util.List;

public class InventoryService {
    private List<Item> inventory;

    public InventoryService() {
        this.inventory = new ArrayList<>();
    }

    public void addItem(Item item) {
        inventory.add(item);
        System.out.println("Added item to inventory: " + item.getName());
    }

    public List<Item> getInventory() {
        return inventory;
    }

    public void listInventory() {
        if (inventory.isEmpty()) {
            System.out.println("Inventory is empty.");
        } else {
            System.out.println("Inventory:");
            for (Item item : inventory) {
                System.out.println(" - " + item.getName() + " ($" + item.getPrice() + ")");
            }
        }
    }
}
// src/MusicStoreSystem.java
import gui.MusicStoreGUI;
import utils.DatabaseUtil;

public class MusicStoreSystem {
    public static void main(String[] args) {
        // Initialize the database
        DatabaseUtil.initializeInventoryDatabase();
        DatabaseUtil.initializeTransactionsDatabase();

        // Start the GUI
        MusicStoreGUI.main(args);
    }
}
package utils;

import java.util.Random;

public class InputDevice {
    private Random random;

    public InputDevice() {
        this.random = new Random();
    }

    public String getType() {
        return "random";
    }

    public Integer nextInt() {
        return random.nextInt(100) + 1;
    }

    public String getLine() {
        return "The quick brown fox jumps over the lazy dog.";
    }

    public Integer[] getNumbers(int N) {
        Integer[] numArray = new Integer[N];
        for (int i = 0; i < N; i++) {
            numArray[i] = nextInt();
        }
        return numArray;
    }
}
package utils;

public class OutputDevice {
    public void writeMessage(String message) {
        System.out.println(message);
    }
}
package utils;

public interface Discountable {
    double applyDiscount();
}
package utils;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import utils.DatabaseUtil;

public class DatabaseUtil {
    private static final String INVENTORY_DB_URL = "jdbc:sqlite:inventory.db";
    private static final String TRANSACTIONS_DB_URL = "jdbc:sqlite:transactions.db";

    // Method to get a connection to the Inventory database
    public static Connection getInventoryConnection() throws SQLException {
        return DriverManager.getConnection(INVENTORY_DB_URL);
    }

    // Method to get a connection to the Transactions database
    public static Connection getTransactionsConnection() throws SQLException {
        return DriverManager.getConnection(TRANSACTIONS_DB_URL);
    }

    // Initialize the Inventory database and create its tables
    public static void initializeInventoryDatabase() {
        String createItemsTableSQL = """
            CREATE TABLE IF NOT EXISTS Items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                price REAL NOT NULL,
                type TEXT NOT NULL
            );
        """;

        try (Connection conn = getInventoryConnection(); Statement stmt = conn.createStatement()) {
            stmt.execute(createItemsTableSQL);
            System.out.println("Inventory database initialized successfully.");
        } catch (SQLException e) {
            System.err.println("Failed to initialize inventory database: " + e.getMessage());
        }
    }

    // Initialize the Transactions database and create its tables
    public static void initializeTransactionsDatabase() {
        String createTransactionsTableSQL = """
            CREATE TABLE IF NOT EXISTS Transactions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                transaction_id TEXT NOT NULL,
                customer_name TEXT NOT NULL,
                customer_email TEXT,
                payment_method TEXT NOT NULL,
                total_amount REAL NOT NULL,
                transaction_date TEXT NOT NULL
            );
        """;

        try (Connection conn = getTransactionsConnection(); Statement stmt = conn.createStatement()) {
            stmt.execute(createTransactionsTableSQL);
            System.out.println("Transactions database initialized successfully.");
        } catch (SQLException e) {
            System.err.println("Failed to initialize transactions database: " + e.getMessage());
        }
    }

    // Save a transaction to the Transactions database
    public static void saveTransaction(String transactionId, String customerName, String customerEmail,
                                       String paymentMethod, double totalAmount, String transactionDate) {
        String insertTransactionSQL = """
            INSERT INTO Transactions (transaction_id, customer_name, customer_email, payment_method, total_amount, transaction_date)
            VALUES (?, ?, ?, ?, ?, ?);
        """;

        try (Connection conn = getTransactionsConnection(); PreparedStatement pstmt = conn.prepareStatement(insertTransactionSQL)) {
            pstmt.setString(1, transactionId);
            pstmt.setString(2, customerName);
            pstmt.setString(3, customerEmail);
            pstmt.setString(4, paymentMethod);
            pstmt.setDouble(5, totalAmount);
            pstmt.setString(6, transactionDate);
            pstmt.executeUpdate();
            System.out.println("Transaction saved to transactions database.");
        } catch (SQLException e) {
            System.err.println("Failed to save transaction: " + e.getMessage());
        }
    }
}
package utils;

public interface Sellable {
    void sell();
}
package models;

import utils.Discountable;

import java.util.ArrayList;
import java.util.List;

public class Order implements Discountable {
    private Item item;
    private List<Discount> discounts;

    public Order(Item item, List<Discount> discounts) {
        if (item == null) {
            throw new IllegalArgumentException("Item cannot be null");
        }
        this.item = item;
        this.discounts = discounts != null ? discounts : new ArrayList<>();
    }

    @Override
    public double applyDiscount() {
        double totalDiscount = 0;
        for (Discount discount : discounts) {
            totalDiscount += discount.calculateDiscount(item.getPrice());
        }

        // Ensure the final price does not go below zero
        double finalPrice = item.getPrice() - totalDiscount;
        return Math.max(finalPrice, 0);
    }

    public Item getItem() {
        return item;
    }

    public List<Discount> getDiscounts() {
        return discounts;  // Added a getter for discounts
    }
}
package models;

import utils.Sellable;

public class Poster extends Item implements Sellable {
    public Poster(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling poster: " + getName() + " for $" + getPrice());
    }
}
package models;

import utils.Sellable;

public class Disk extends Item implements Sellable {
    public Disk(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling disk: " + getName() + " for $" + getPrice());
    }
}
package models;

public class Customer {
    private String name;
    private String email;

    public Customer(String name, String email) {
        this.name = name;
        this.email = email;
    }

    public String getName() {
        return name;
    }

    public String getEmail() {
        return email;
    }
}
package models;

public class Payment {
    private String method;
    private double amountPaid;

    public Payment(String method, double amountPaid) {
        this.method = method;
        this.amountPaid = amountPaid;
    }

    public void processPayment() {
        System.out.println("Processing payment with " + method + " for $" + amountPaid);
    }

    // Getter for method
    public String getMethod() {
        return method;
    }

    // Getter for amountPaid
    public double getAmountPaid() {
        return amountPaid;
    }
}
package models;

public class Discount {
    private double amount;
    private String type;

    public Discount(double amount, String type) {
        this.amount = amount;
        this.type = type;
    }

    public double calculateDiscount(double price) {
        if (type.equalsIgnoreCase("percentage")) {
            return price * (amount / 100);
        } else if (type.equalsIgnoreCase("flat")) {
            return amount;
        }
        return 0;
    }

    public String getType() {
        return type;
    }
}
package models;

import utils.Sellable;

public class CD extends Item implements Sellable {
    public CD(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling CD: " + getName() + " for $" + getPrice());
    }
}
package models;

import utils.Sellable;

public class Instrument extends Item implements Sellable {
    public Instrument(String name, double price) {
        super(name, price);
    }

    @Override
    public void sell() {
        System.out.println("Selling instrument: " + getName() + " for $" + getPrice());
    }
}
package models;

public abstract class Item {
    private String name;
    private double price;

    public Item(String name, double price) {
        this.name = name;
        this.price = price;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }
}
package models;

import java.util.Date;
import java.util.List;

public class Transaction {
    private String transactionId;
    private Customer customer;
    private List<Order> orders;
    private Payment payment;
    private Date transactionDate;
    private double totalAmount;

    public Transaction(String transactionId, Customer customer, List<Order> orders, Payment payment, Date transactionDate) {
        this.transactionId = transactionId;
        this.customer = customer;
        this.orders = orders;
        this.payment = payment;
        this.transactionDate = transactionDate;
        this.totalAmount = calculateTotalAmount();
    }

    private double calculateTotalAmount() {
        return orders.stream()
                .mapToDouble(Order::applyDiscount)
                .sum();
    }

    public String getTransactionId() {
        return transactionId;
    }

    public Customer getCustomer() {
        return customer;
    }

    public List<Order> getOrders() {
        return orders;
    }

    public Payment getPayment() {
        return payment;
    }

    public Date getTransactionDate() {
        return transactionDate;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public void printTransactionDetails() {
        System.out.println("Transaction ID: " + transactionId);
        System.out.println("Date: " + transactionDate);
        System.out.println("Customer: " + customer.getName() + " (" + customer.getEmail() + ")");
        System.out.println("Orders:");
        for (Order order : orders) {
            System.out.println(" - " + order.getItem().getName() + " - $" + order.applyDiscount());
        }
        System.out.println("Total Amount: $" + totalAmount);
        System.out.println("Payment Method: " + payment.getMethod());
        System.out.println("Amount Paid: $" + payment.getAmountPaid());
    }
}
package gui;

import javax.swing.*;
import java.awt.*;

public class MusicStoreGUI extends JFrame {
    public MusicStoreGUI() {
        setTitle("Music Store Management System");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Tabbed Pane for different management functionalities
        JTabbedPane tabbedPane = new JTabbedPane();
        tabbedPane.addTab("Inventory", new InventoryPanel());
        tabbedPane.addTab("Orders", new OrderPanel());
        tabbedPane.addTab("Customers", new CustomerPanel());
        tabbedPane.addTab("Reports", new ReportPanel());

        add(tabbedPane, BorderLayout.CENTER);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            MusicStoreGUI gui = new MusicStoreGUI();
            gui.setVisible(true);
        });
    }
}
package gui;

import models.Customer;
import services.CustomerService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CustomerPanel extends JPanel {
    private CustomerService customerService;
    private DefaultListModel<String> customerListModel;

    public CustomerPanel() {
        this.customerService = new CustomerService();
        setLayout(new BorderLayout());

        // Input panel for adding a new customer
        JPanel addCustomerPanel = new JPanel(new GridLayout(3, 2));
        JTextField customerNameField = new JTextField();
        JTextField customerEmailField = new JTextField();
        JButton addCustomerButton = new JButton("Add Customer");

        addCustomerPanel.add(new JLabel("Customer Name:"));
        addCustomerPanel.add(customerNameField);
        addCustomerPanel.add(new JLabel("Customer Email:"));
        addCustomerPanel.add(customerEmailField);
        addCustomerPanel.add(addCustomerButton);

        add(addCustomerPanel, BorderLayout.NORTH);

        // Customer list display
        customerListModel = new DefaultListModel<>();
        JList<String> customerList = new JList<>(customerListModel);
        JScrollPane scrollPane = new JScrollPane(customerList);
        add(scrollPane, BorderLayout.CENTER);

        // Add customer action
        addCustomerButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String name = customerNameField.getText();
                String email = customerEmailField.getText();

                if (!name.isEmpty() && !email.isEmpty()) {
                    Customer customer = new Customer(name, email);
                    customerService.addCustomer(customer);
                    customerListModel.addElement(customer.getName() + " - " + customer.getEmail());
                    customerNameField.setText("");
                    customerEmailField.setText("");
                } else {
                    JOptionPane.showMessageDialog(CustomerPanel.this, "Please fill in both name and email fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }
}
package gui;

import services.ReportService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class ReportPanel extends JPanel {
    private ReportService reportService;
    private JTextArea reportArea;

    public ReportPanel() {
        this.reportService = new ReportService();
        setLayout(new BorderLayout());

        // Report display area
        reportArea = new JTextArea();
        reportArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(reportArea);
        add(scrollPane, BorderLayout.CENTER);

        // Generate report button
        JButton generateReportButton = new JButton("Generate Report");
        generateReportButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String report = reportService.generateSalesReport();
                reportArea.setText(report);
            }
        });

        add(generateReportButton, BorderLayout.SOUTH);
    }
}
package gui;

import models.Customer;
import models.Order;
import models.Payment;
import models.Item;
import models.Transaction;
import services.InventoryService;
import services.OrderService;
import utils.DatabaseUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.util.ArrayList;
import java.util.List;

public class OrderPanel extends JPanel {
    private OrderService orderService;
    private InventoryService inventoryService;

    private JTextField customerNameField;
    private JTextField customerEmailField;
    private JComboBox<String> paymentMethodCombo;
    private JList<String> productSelectionList;
    private DefaultListModel<String> ordersListModel;

    public OrderPanel() {
        this.orderService = new OrderService();
        this.inventoryService = new InventoryService(); // Access inventory

        setLayout(new BorderLayout());

        // Order input panel
        JPanel orderInputPanel = new JPanel(new GridLayout(6, 2));
        customerNameField = new JTextField();
        customerEmailField = new JTextField();
        paymentMethodCombo = new JComboBox<>(new String[]{"Card", "Cash"});

        JButton placeOrderButton = new JButton("Place Order");

        // Set up product selection list
        productSelectionList = new JList<>(getInventoryItemNames());
        productSelectionList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        JScrollPane productScrollPane = new JScrollPane(productSelectionList);

        orderInputPanel.add(new JLabel("Customer Name:"));
        orderInputPanel.add(customerNameField);
        orderInputPanel.add(new JLabel("Customer Email:"));
        orderInputPanel.add(customerEmailField);
        orderInputPanel.add(new JLabel("Payment Method:"));
        orderInputPanel.add(paymentMethodCombo);
        orderInputPanel.add(new JLabel("Select Products:"));
        orderInputPanel.add(productScrollPane);

        add(orderInputPanel, BorderLayout.NORTH);

        // Orders list display
        ordersListModel = new DefaultListModel<>();
        JList<String> ordersList = new JList<>(ordersListModel);
        JScrollPane scrollPane = new JScrollPane(ordersList);
        add(scrollPane, BorderLayout.CENTER);

        // Add button to place order
        placeOrderButton.addActionListener(this::handlePlaceOrder);
        add(placeOrderButton, BorderLayout.SOUTH);
    }

    // Populate product selection list from inventory
    private DefaultListModel<String> getInventoryItemNames() {
        DefaultListModel<String> model = new DefaultListModel<>();
        for (Item item : inventoryService.getInventory()) {
            model.addElement(item.getName() + " - $" + item.getPrice());
        }
        return model;
    }

    // Handle order placement
    private void handlePlaceOrder(ActionEvent e) {
        String name = customerNameField.getText();
        String email = customerEmailField.getText();
        String paymentMethod = (String) paymentMethodCombo.getSelectedItem();

        // Create customer
        Customer customer = new Customer(name, email);

        // Process selected items
        List<Item> selectedItems = getSelectedItems();
        if (selectedItems.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select at least one product.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Calculate total payment amount
        double totalAmount = calculateTotal(selectedItems);

        // Create payment
        Payment payment = new Payment(paymentMethod, totalAmount);

        // Create and place order if items are available
        if (inventoryService.checkInventoryAvailability(selectedItems)) {
            Order order = new Order(selectedItems.get(0), null); // Assuming discounts are null for simplicity
            orderService.placeOrder(order, customer);

            // Create transaction
            String transactionId = "TXN" + System.currentTimeMillis();
            Transaction transaction = new Transaction(transactionId, customer, List.of(order), payment, new java.util.Date());
            transaction.printTransactionDetails();

            // Save transaction to database
            // Example usage in OrderPanel to save a transaction
            String transactionDate = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new java.util.Date());
            DatabaseUtil.saveTransaction(transactionId, customer.getName(), customer.getEmail(), paymentMethod, totalAmount, transactionDate);

            // Remove ordered items from inventory
            inventoryService.removeItems(selectedItems);
            updateProductSelection();

            ordersListModel.addElement("Order for " + customer.getName() + " - $" + payment.getAmountPaid());
        } else {
            JOptionPane.showMessageDialog(this, "Some items are out of stock.", "Inventory Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Get selected items from inventory
    private List<Item> getSelectedItems() {
        List<Item> selectedItems = new ArrayList<>();
        for (String selectedValue : productSelectionList.getSelectedValuesList()) {
            String itemName = selectedValue.split(" - ")[0];
            inventoryService.findItemByName(itemName).ifPresent(selectedItems::add);
        }
        return selectedItems;
    }

    // Calculate total price of selected items
    private double calculateTotal(List<Item> items) {
        return items.stream().mapToDouble(Item::getPrice).sum();
    }

    // Update product selection list after items are removed
    private void updateProductSelection() {
        productSelectionList.setModel(getInventoryItemNames());
    }
}
package gui;

import models.*;
import services.InventoryService;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class InventoryPanel extends JPanel {
    private InventoryService inventoryService;
    private DefaultListModel<String> inventoryListModel;
    private JTextField nameField;
    private JTextField priceField;
    private JComboBox<String> typeComboBox;
    private JList<String> inventoryList;

    public InventoryPanel() {
        this.inventoryService = new InventoryService();
        setLayout(new BorderLayout());

        // Input panel for adding items
        JPanel addItemPanel = new JPanel(new GridLayout(5, 2));
        nameField = new JTextField();
        priceField = new JTextField();
        typeComboBox = new JComboBox<>(new String[]{"CD", "Disk", "Instrument", "Poster"});
        JButton addItemButton = new JButton("Add Item");
        
        addItemPanel.add(new JLabel("Item Name:"));
        addItemPanel.add(nameField);
        addItemPanel.add(new JLabel("Item Price:"));
        addItemPanel.add(priceField);
        addItemPanel.add(new JLabel("Item Type:"));
        addItemPanel.add(typeComboBox);
        addItemPanel.add(addItemButton);

        // Inventory list display
        inventoryListModel = new DefaultListModel<>();
        inventoryList = new JList<>(inventoryListModel);
        JScrollPane scrollPane = new JScrollPane(inventoryList);
        add(scrollPane, BorderLayout.CENTER);

        // Buttons for search and delete functionalities
        JButton searchItemButton = new JButton("Search Item");
        JButton deleteItemButton = new JButton("Delete Selected Item");
        JPanel actionPanel = new JPanel(new GridLayout(1, 2));
        actionPanel.add(searchItemButton);
        actionPanel.add(deleteItemButton);

        // Add panels to main layout
        add(addItemPanel, BorderLayout.NORTH);
        add(actionPanel, BorderLayout.SOUTH);

        // Add item button action
        addItemButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                addItemToInventory();
            }
        });

        // Search item button action
        searchItemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchItemInInventory();
            }
        });

        // Delete item button action
        deleteItemButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteSelectedItemFromInventory();
            }
        });
    }

    // Method to add item to inventory
    private void addItemToInventory() {
        String name = nameField.getText();
        String priceText = priceField.getText();
        String type = (String) typeComboBox.getSelectedItem();

        try {
            double price = Double.parseDouble(priceText);
            Item item;

            switch (type) {
                case "CD":
                    item = new CD(name, price);
                    break;
                case "Disk":
                    item = new Disk(name, price);
                    break;
                case "Instrument":
                    item = new Instrument(name, price);
                    break;
                case "Poster":
                    item = new Poster(name, price);
                    break;
                default:
                    throw new IllegalArgumentException("Invalid item type");
            }

            inventoryService.addItem(item);
            inventoryListModel.addElement(item.getName() + " - $" + item.getPrice() + " (" + type + ")");
            nameField.setText("");
            priceField.setText("");

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid price format. Please enter a valid number.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Method to search for an item in the inventory
    private void searchItemInInventory() {
        String itemName = JOptionPane.showInputDialog(this, "Enter item name to search:");
        if (itemName != null && !itemName.isEmpty()) {
            inventoryService.findItemByName(itemName).ifPresentOrElse(
                item -> JOptionPane.showMessageDialog(this, "Item found: " + item.getName() + " - $" + item.getPrice(), 
                                                      "Search Result", JOptionPane.INFORMATION_MESSAGE),
                () -> JOptionPane.showMessageDialog(this, "Item not found.", "Search Result", JOptionPane.ERROR_MESSAGE)
            );
        }
    }

    // Method to delete the selected item from the inventory
    private void deleteSelectedItemFromInventory() {
        String selectedItem = inventoryList.getSelectedValue();
        if (selectedItem != null) {
            String itemName = selectedItem.split(" - ")[0];
            inventoryService.findItemByName(itemName).ifPresent(item -> {
                inventoryService.deleteItem(item);
                inventoryListModel.removeElement(selectedItem);
                JOptionPane.showMessageDialog(this, "Item deleted: " + item.getName(), "Delete Result", JOptionPane.INFORMATION_MESSAGE);
            });
        } else {
            JOptionPane.showMessageDialog(this, "Please select an item to delete.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
package services;

import models.Order;

import java.util.List;

public class ReportService {
    private OrderService orderService;

    public ReportService() {
        this.orderService = new OrderService();
    }

    public String generateSalesReport() {
        StringBuilder report = new StringBuilder();
        List<Order> orders = orderService.getOrders();

        double totalRevenue = 0;
        report.append("Sales Report:\n");
        report.append("=============\n");

        for (Order order : orders) {
            double discountedPrice = order.applyDiscount();
            totalRevenue += discountedPrice;
            report.append(String.format("Order: %s - Price after discount: $%.2f\n", order.getItem().getName(), discountedPrice));
        }

        report.append("=============\n");
        report.append(String.format("Total Revenue: $%.2f\n", totalRevenue));

        return report.toString();
    }
}
package services;

import models.Customer;
import models.Order;
import models.Payment;

import java.util.ArrayList;
import java.util.List;

public class OrderService {
    private List<Order> orders;
    private List<Customer> customers;


    public OrderService() {
        orders = new ArrayList<>();
        customers = new ArrayList<>();
    }

    // Inside OrderService.java
    public List<Order> getOrders() {
        return orders;
    }

    public void placeOrder(Order order, Customer customer) {
        orders.add(order);
        customers.add(customer);
        System.out.println("Order placed for customer: " + customer.getName());
    }

    public void listOrders() {
        System.out.println("Orders:");
        for (Order order : orders) {
            System.out.println(" - " + order.getItem().getName() + " after discount: $" + order.applyDiscount());
        }
    }
}
// src/services/InventoryService.java
package services;

import models.*;
import utils.DatabaseUtil;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

public class InventoryService {
    public InventoryService() {
        DatabaseUtil.initializeInventoryDatabase();
    }

    public void addItem(Item item) {
        String sql = "INSERT INTO Items (name, price, type) VALUES (?, ?, ?)";

        try (Connection conn = DatabaseUtil.getInventoryConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, item.getName());
            pstmt.setDouble(2, item.getPrice());
            pstmt.setString(3, item.getClass().getSimpleName());
            pstmt.executeUpdate();
            System.out.println("Added item to inventory: " + item.getName());
        } catch (SQLException e) {
            System.err.println("Failed to add item: " + e.getMessage());
        }
    }

    public List<Item> getInventory() {
        List<Item> items = new ArrayList<>();
        String sql = "SELECT name, price, type FROM Items";

        try (Connection conn = DatabaseUtil.getInventoryConnection(); Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(sql)) {
            while (rs.next()) {
                String name = rs.getString("name");
                double price = rs.getDouble("price");
                String type = rs.getString("type");

                Item item = switch (type) {
                    case "CD" -> new CD(name, price);
                    case "Disk" -> new Disk(name, price);
                    case "Instrument" -> new Instrument(name, price);
                    case "Poster" -> new Poster(name, price);
                    default -> throw new IllegalArgumentException("Unknown type: " + type);
                };
                items.add(item);
            }
        } catch (SQLException e) {
            System.err.println("Failed to retrieve inventory: " + e.getMessage());
        }

        return items;
    }

    public Optional<Item> findItemByName(String name) {
        String sql = "SELECT name, price, type FROM Items WHERE name = ?";
        try (Connection conn = DatabaseUtil.getInventoryConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, name);
            ResultSet rs = pstmt.executeQuery();
            if (rs.next()) {
                double price = rs.getDouble("price");
                String type = rs.getString("type");
                Item item = switch (type) {
                    case "CD" -> new CD(name, price);
                    case "Disk" -> new Disk(name, price);
                    case "Instrument" -> new Instrument(name, price);
                    case "Poster" -> new Poster(name, price);
                    default -> throw new IllegalArgumentException("Unknown type: " + type);
                };
                return Optional.of(item);
            }
        } catch (SQLException e) {
            System.err.println("Failed to find item: " + e.getMessage());
        }
        return Optional.empty();
    }

    public void deleteItem(Item item) {
        String sql = "DELETE FROM Items WHERE name = ?";

        try (Connection conn = DatabaseUtil.getInventoryConnection(); PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, item.getName());
            int rowsAffected = pstmt.executeUpdate();
            if (rowsAffected > 0) {
                System.out.println("Deleted item from inventory: " + item.getName());
            } else {
                System.out.println("Item not found in inventory: " + item.getName());
            }
        } catch (SQLException e) {
            System.err.println("Failed to delete item: " + e.getMessage());
        }
    }

    public void removeItems(List<Item> items) {
        for (Item item : items) {
            deleteItem(item);
        }
    }

    public boolean checkInventoryAvailability(List<Item> items) {
        for (Item item : items) {
            if (findItemByName(item.getName()).isEmpty()) {
                return false;
            }
        }
        return true;
    }
}
package services;

import models.Customer;

import java.util.ArrayList;
import java.util.List;

public class CustomerService {
    private List<Customer> customers;

    public CustomerService() {
        this.customers = new ArrayList<>();
    }

    public void addCustomer(Customer customer) {
        customers.add(customer);
        System.out.println("Customer added: " + customer.getName());
    }

    public List<Customer> getAllCustomers() {
        return customers;
    }
}
